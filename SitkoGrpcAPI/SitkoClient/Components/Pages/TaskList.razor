@page "/"
@using System.ComponentModel
@using System.Diagnostics
@using System.Globalization
@using SitkoClient.Enums
@using SortDirection = SitkoClient.Enums.SortDirection

@rendermode InteractiveServer
@inject ITodoService _service


<MudGrid>
    <MudItem xs="12">
        <MudItem>
            <MudGrid>
                <MudCardContent Class="object-center">
                    <TodoListAdd OnAfterItemAdded="OnAfterAddedTaskItem"/>
                    <MudCardActions Class="align-center justify-center">
                        <MudToggleGroup T="ActiveButton" SelectionMode="SelectionMode.SingleSelection"
                                        @bind-Value="activeButton" Color="Color.Primary" CheckMark FixedContent>
                            <MudToggleItem Value="@(ActiveButton.AllList)">
                                <MudButton @onclick="AllList">Все</MudButton>
                            </MudToggleItem>
                            <MudToggleItem Value="ActiveButton.ListCompleted">
                                <MudButton @onclick="ListCompleted">Выполненые</MudButton>
                            </MudToggleItem>
                            <MudToggleItem Value="@(ActiveButton.ListActive)">
                                <MudButton @onclick="ListActive">Активные</MudButton>
                            </MudToggleItem>
                        </MudToggleGroup>
                    </MudCardActions>
                </MudCardContent>
            </MudGrid>
            <MudStack Class="align-center justify-center" Row="true">
                <MudText Typo="Typo.h4" Class="">Список задач</MudText>
            </MudStack>
            <MudItem xs="2">
                <MudStack Class="align-center justify-start" Row="true">
                    <MudToggleIconButton @bind-Toggled="SortDirectionToggled"
                                         Icon="@Icons.Material.Filled.ExpandMore"
                                         ToggledIcon="@Icons.Material.Filled.ExpandLess"/>
                    <MudSelect @bind-Value="FilterActive">
                        @foreach (var color in Enum.GetValues(typeof(FilterActive)).Cast<FilterActive>())
                        {
                            <MudSelectItem Value="@color">@color.ToStringRus() </MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudItem>
        </MudItem>
        <MudItem>
            <TodoList TodoItems="TodoItemsFiltered"
                      TodoListService="_service"
                      OnAfterItemChangeInStatus="OnAfterItemChangeInStatus"/>
        </MudItem>
    </MudItem>
</MudGrid>

@code {
    
    public List<TodoItemGrpc> TodoItemsFiltered { get; set; } = new();
    public FilterActive FilterActive
    {
        get => _filterActive;
        set
        {
            _filterActive = value;
            Sort();
        }
    }

    private bool SortDirectionToggled
    {
        get => _sortDirectionToggled;
        set
        {
            _sortDirectionToggled = value;
            Sort();
        }
    }

    private SortDirection sortDirection;
    private ActiveButton activeButton;
    private List<TodoItemGrpc> todoItems = new();
    private bool _sortDirectionToggled;
    private FilterActive _filterActive = FilterActive.SortAlphabetically;
    public EventCallback<List<TodoItemGrpc>> Ew;

  protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetAllTodos();
    }

    protected void OnPropertyChanged()
    {
        AllList();
    }

    private async Task GetAllTodos()
    {
        StateHasChanged();
        todoItems = await _service.TodoListAllAsync();
        await Ew.InvokeAsync(todoItems);
        PageActive();
    }

    private void OnAfterItemChangeInStatus()
    {
        PageActive();
    }

    private void OnAfterAddedTaskItem(TodoItemGrpc val)
    {
        todoItems.Add(val);
        PageActive();
    }

    private void AllList()
    {
        TodoItemsFiltered = todoItems;
        activeButton = ActiveButton.AllList;
    }

    private void ListCompleted()
    {
        TodoItemsFiltered =  todoItems.Where(_ => _.Completed).ToList();
        activeButton = ActiveButton.ListCompleted;
    }

    private void ListActive()
    {
        TodoItemsFiltered = todoItems.Where(_ => !_.Completed).ToList();
        activeButton = ActiveButton.ListActive;
    }

    private void Sort()
    {
        sortDirection = SortDirectionToggled ? 
            SortDirection.Ascending : SortDirection.Descending;
        switch (FilterActive)
        {
            case FilterActive.SortAlphabetically:
                SortAlphabetically();
                break;
            case FilterActive.SortExecutionDate:
                SortExecutionDate();
                break;
            case FilterActive.SortCreationDate:
                SortCreationDate();
                break;
        }
        PageActive();
    }

    private void SortAlphabetically()
    {
        switch (sortDirection)
        {
            case SortDirection.Ascending:
                todoItems = todoItems
                    .OrderBy(x => x.Name).ToList();
                break;
            case SortDirection.Descending:
                todoItems = todoItems.OrderByDescending(x => x.Name).ToList();
                break;
        }
    }

    private void SortExecutionDate()
    {
        switch (sortDirection)
        {
            case SortDirection.Ascending:
                todoItems = todoItems
                    .OrderBy(x => x.ExecutionDate).ToList();
                break;
            case SortDirection.Descending:
                todoItems = todoItems.OrderByDescending(x => x.ExecutionDate).ToList();
                break;
        }
    }

    private void SortCreationDate()
    {
        switch (sortDirection)
        {
            case SortDirection.Ascending:
                todoItems = todoItems
                    .OrderBy(x => x.CreationDate).ToList();
                break;
            case SortDirection.Descending:
                todoItems = todoItems.OrderByDescending(x => x.CreationDate).ToList();
                break;
        }
    }

    private void PageActive()
    {
        switch (activeButton)
        {
            case ActiveButton.AllList:
                AllList();
                break;
            case ActiveButton.ListCompleted:
                ListCompleted();
                break;
            case ActiveButton.ListActive:
                ListActive();
                break;
        }
    }
}