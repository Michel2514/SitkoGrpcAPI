@using Google.Protobuf.WellKnownTypes
@rendermode InteractiveServer
@inject NavigationManager Navigation
<MudItem Class=" mt-1">
    <MudPaper Class="pa-4 form-control" Style="border-top: 1px solid #c4c4c4;
    border-bottom: 1px solid #c4c4c4;">
        <MudStack StretchItems="@StretchItems.Middle" Row>
            <MudCheckBox @bind-Value="@TodoItem.Completed" @onclick="CompleteTask"></MudCheckBox>
            <MudButton Variant="Variant.Text" OnClick="DescriptionGet" Style="justify-content: flex-start;">@TodoItem.Name</MudButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Delete"/>

        </MudStack>
    </MudPaper>
</MudItem>

@code {
    [Parameter] 
    public TodoItemGrpc TodoItem { get; set; }
    [Parameter]
    public EventCallback<TodoItemGrpc> OnAfterItemDeleted { get; set; }
    [Parameter]
    public ITodoService TodoListService { get; set; }
    [Parameter]
    public EventCallback<TodoItemGrpc> OnAfterItemChange { get; set; }
   

    public async Task DescriptionGet()
    {
        Navigation.NavigateTo($"TaskDescription/{TodoItem.Id}");
    }

    public async Task CompleteTask()
    {
        if (TodoItem.Completed)
        {
            TodoItem.ExecutionDate = new Timestamp();
            TodoItem.Completed = false;
        }
        else
        {
            TodoItem.ExecutionDate = DateTime.UtcNow.ToTimestamp();
            TodoItem.Completed = true;
        }

        await TodoListService.TodoTaskUpdateAsync(TodoItem);
        await OnAfterItemChange.InvokeAsync(TodoItem);
    }
   
    public async Task Delete()
    {
        await TodoListService.TodoItemByIdDeleteAsync(TodoItem.Id);
        await OnAfterItemDeleted.InvokeAsync(TodoItem);
    }
}